{
  "name": "CV Screening Automation",
  "nodes": [
    {
      "parameters": {
        "operation": "move",
        "fileId": {
          "__rl": true,
          "value": "={{ $json._fileId }}",
          "mode": ""
        },
        "driveId": {
          "__rl": true,
          "value": "My Drive",
          "mode": "list"
        },
        "folderId": {
          "__rl": true,
          "value": "1mu9rgElrKMU1vt22EC7KaKWquw1EkJDP",
          "mode": "id"
        }
      },
      "id": "4c7af02a-0dcd-4cfe-b57a-e4d2940703de",
      "name": "Move to Failed",
      "type": "n8n-nodes-base.googleDrive",
      "position": [
        -864,
        272
      ],
      "typeVersion": 3,
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "czkniWtEtuPsZAHm",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "sendTo": "svama85@gmail.com",
        "subject": "⚠️ CV Processing Error: {{ $json._fileName }}",
        "message": "<h2>CV Processing Error</h2>\n<p>An error occurred while processing a CV:</p>\n<ul>\n<li><strong>File:</strong> {{ $json._fileName }}</li>\n<li><strong>Error:</strong> {{ $json._error }}</li>\n<li><strong>Time:</strong> {{ $json['Date Applied'] }}</li>\n</ul>\n<p>The CV has been moved to the Failed folder for manual review.</p>\n<p><a href=\"{{ $json['CV Link'] }}\">View CV</a></p>",
        "options": {}
      },
      "id": "1bc3d1fb-8909-4ced-b39d-7414e38479f1",
      "name": "Email - Error Alert",
      "type": "n8n-nodes-base.gmail",
      "position": [
        -640,
        272
      ],
      "typeVersion": 2.1,
      "webhookId": "d407fd3b-0dc0-460a-af9f-78e15a42ed6c",
      "credentials": {
        "gmailOAuth2": {
          "id": "kHGNG9wgUFdTkiBE",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "sendTo": "svama85@gmail.com",
        "subject": "CV Processed: {{ $json['Candidate Name'] }} (Score: {{ $json.Score }})",
        "message": "<h2>CV Processing Complete</h2>\n<p>A new CV has been analyzed:</p>\n<ul>\n<li><strong>Candidate:</strong> {{ $json['Candidate Name'] }}</li>\n<li><strong>Score:</strong> {{ $json.Score }}/100</li>\n<li><strong>Category:</strong> {{ $json.Category }}</li>\n<li><strong>Years Experience:</strong> {{ $json['Years Experience'] }}</li>\n</ul>\n<h3>AI Analysis</h3>\n<p><strong>Strengths:</strong> {{ $json.Strengths }}</p>\n<p><strong>Matched Skills:</strong> {{ $json['Matched Keywords'] }}</p>\n<p><strong>Recommendation:</strong> {{ $json['AI Recommendation'] }}</p>\n<p><a href=\"{{ $json['CV Link'] }}\">View CV</a></p>",
        "options": {}
      },
      "id": "f8f6b1f9-39f5-4c92-8885-9feebfc4d3f2",
      "name": "Email - Standard",
      "type": "n8n-nodes-base.gmail",
      "position": [
        -640,
        80
      ],
      "typeVersion": 2.1,
      "webhookId": "35c947e3-ceb3-404d-9612-841b5681d61e",
      "credentials": {
        "gmailOAuth2": {
          "id": "kHGNG9wgUFdTkiBE",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json._processingSuccess}}",
              "value2": true
            }
          ]
        }
      },
      "id": "9d2fb7c3-2708-4b9d-88bd-f848f1d84b57",
      "name": "Check Processing Success",
      "type": "n8n-nodes-base.if",
      "position": [
        -1088,
        176
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1xfU9rzjBpb3NEHYzvMuHZ2R2QW_IYe5i3dCW7Ls-bII",
          "mode": "list",
          "cachedResultName": "CV Screening Tracker",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1xfU9rzjBpb3NEHYzvMuHZ2R2QW_IYe5i3dCW7Ls-bII/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1xfU9rzjBpb3NEHYzvMuHZ2R2QW_IYe5i3dCW7Ls-bII/edit#gid=0"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {},
          "matchingColumns": [],
          "schema": [
            {
              "id": "Date Applied",
              "displayName": "Date Applied",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Candidate Name",
              "displayName": "Candidate Name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "CV Link",
              "displayName": "CV Link",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Score",
              "displayName": "Score",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Category",
              "displayName": "Category",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Matched Keywords",
              "displayName": "Matched Keywords",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Red Flags",
              "displayName": "Red Flags",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Status",
              "displayName": "Status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "AI Recommendation",
              "displayName": "AI Recommendation",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Years Experience",
              "displayName": "Years Experience",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Strengths",
              "displayName": "Strengths",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "id": "fc415cc1-f5c4-4642-ac97-b5ad0c84d1e0",
      "name": "Log to Sheets",
      "type": "n8n-nodes-base.googleSheets",
      "position": [
        -1312,
        176
      ],
      "typeVersion": 4,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "di2sX6e1W7xHXFNa",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": " // Get the AI response from the agent output\n  const response = $input.item.json.response || $input.item.json.output || $input.item.json;\n  let aiText = '';\n\n  // Extract text from the response structure\n  if (response.generations && response.generations[0] && response.generations[0][0]) {\n    aiText = response.generations[0][0].text;\n  } else if (typeof response === 'string') {\n    aiText = response;\n  } else if (response.text) {\n    aiText = response.text;\n  }\n\n  // Remove markdown code blocks if present\n  aiText = aiText.replace(/```json\\n?/g, '').replace(/```\\n?/g, '').trim();\n\n  // Get file info from Download CV node\n  const downloadData = $('Download CV').item.json;\n  const fileId = downloadData.id;\n  const fileName = downloadData.name;\n\n  // Parse the JSON\n  try {\n    const jsonData = JSON.parse(aiText);\n\n    // Format the Google Drive link\n    const driveLink = `https://drive.google.com/file/d/${fileId}/view?usp=drivesdk`;\n\n    // Return formatted data for Google Sheets\n    return {\n      'Date Applied': new Date().toISOString().split('T')[0],\n      'Candidate Name': jsonData.name,\n      'CV Link': driveLink,\n      'Score': jsonData.overall_score,\n      'Category': jsonData.category,\n      'Matched Keywords': jsonData.matchedSkills.join(', '),\n      'Red Flags': jsonData.redFlags.length > 0 ? jsonData.redFlags.join(', ') : 'None',\n      'Status': 'AI Reviewed',\n      'AI Recommendation': jsonData.recommendation,\n      'Years Experience': jsonData.yearsExperience,\n      'Strengths': jsonData.strengths.join('; '),\n      '_processingSuccess': true,\n      '_fileId': fileId,\n      '_fileName': fileName\n    };\n  } catch (error) {\n    // If parsing fails, return error info\n    const driveLink = `https://drive.google.com/file/d/${fileId}/view?usp=drivesdk`;\n\n    return {\n      'Date Applied': new Date().toISOString().split('T')[0],\n      'Candidate Name': 'Parse Error',\n      'CV Link': driveLink,\n      'Score': 0,\n      'Category': 'Error',\n      'Matched Keywords': '',\n      'Red Flags': 'Failed to parse AI response',\n      'Status': 'Error - Review Needed',\n      'AI Recommendation': 'Manual review required',\n      'Years Experience': 'Unknown',\n      'Strengths': '',\n      '_processingSuccess': false,\n      '_fileId': fileId,\n      '_fileName': fileName,\n      '_error': error.message\n    };\n  }"
      },
      "id": "56f7cb5a-c3a1-4b78-ab8e-e69faca6bc9c",
      "name": "Parse AI Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1536,
        176
      ]
    },
    {
      "parameters": {
        "options": {
          "temperature": 0
        }
      },
      "id": "f669251f-609b-4e27-b11b-d277ceeff732",
      "name": "OpenAI Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        -1840,
        400
      ],
      "credentials": {
        "openAiApi": {
          "id": "Iyg2H3l8OfWgDCu4",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Analyze this CV content and provide a comprehensive evaluation:\\n\\n{{ $json.text }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "You are an expert CV screening agent analyzing candidates for a Data Analyst position requiring Python, SQL, and data visualization skills.\\n\\nAnalyze the CV and return ONLY a valid JSON object with these fields:\\n- name (string): candidate full name\\n- email (string): candidate email or 'not found'\\n- overall_score (number): score from 0 to 100\\n- category (string): one of 'Highly Qualified', 'Qualified', 'Possibly Qualified', or 'Unqualified'\\n- matchedSkills (array): list of matching technical skills found\\n- yearsExperience (number): years of relevant experience\\n- redFlags (array): list of any concerns or missing requirements\\n- strengths (array): list of candidate's key strengths\\n- recommendation (string): 'hire', 'maybe', or 'no' followed by brief reasoning\\n\\nScoring guidelines:\\n- 90-100: Highly Qualified (perfect match)\\n- 70-89: Qualified (strong candidate)\\n- 50-69: Possibly Qualified (has potential)\\n- 0-49: Unqualified (lacks requirements)\\n\\nIMPORTANT: Return ONLY the JSON object, no other text."
        }
      },
      "id": "d4f1b84d-13db-478a-b5af-37e5a6f5db34",
      "name": "AI Agent for Scoring",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.5,
      "position": [
        -1936,
        176
      ]
    },
    {
      "parameters": {
        "operation": "pdf",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -2160,
        176
      ],
      "id": "d6b4e10b-e290-40a9-839f-7b9b46c6a127",
      "name": "Extract from File"
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": "={{$json.id}}",
        "options": {}
      },
      "id": "cb8ef2b5-55af-4378-acdf-979b137bd240",
      "name": "Download CV",
      "type": "n8n-nodes-base.googleDrive",
      "position": [
        -2384,
        176
      ],
      "typeVersion": 3,
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "czkniWtEtuPsZAHm",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "batchSize": 5,
        "options": {}
      },
      "id": "ef7c2795-8f96-48f6-a96b-e863372a4aae",
      "name": "Split In Batches",
      "type": "n8n-nodes-base.splitInBatches",
      "position": [
        -2608,
        176
      ],
      "typeVersion": 3
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutes": 30
            }
          ]
        }
      },
      "id": "8acc8a0a-930e-4d85-94d3-9c17dc968cf4",
      "name": "Process CVs Every 30 Minutes",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -3280,
        176
      ]
    },
    {
      "parameters": {
        "url": "https://www.googleapis.com/drive/v3/files",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googleDriveOAuth2Api",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "q",
              "value": "'1dMuo2J3L52QqDmHj0UOEe9MSk0gsPSNa' in parents and mimeType='application/pdf' and trashed=false"
            },
            {
              "name": "fields",
              "value": "files(id,name,mimeType,webViewLink,createdTime)"
            },
            {
              "name": "pageSize",
              "value": "100"
            }
          ]
        },
        "options": {}
      },
      "id": "ae0d27e3-1c33-48e5-a0de-9c0dd2090562",
      "name": "Get All CVs via API",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -3056,
        176
      ],
      "typeVersion": 4.2,
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "czkniWtEtuPsZAHm",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Get the files array from the API response\nconst items = $input.all();\nlet allFiles = [];\n\n// Extract files from the API response structure\nitems.forEach(item => {\n  if (item.json.files && Array.isArray(item.json.files)) {\n    // API returns {files: [...]} structure\n    allFiles = allFiles.concat(item.json.files);\n  } else if (item.json.mimeType) {\n    // Individual file items\n    allFiles.push(item.json);\n  }\n});\n\n// Filter only PDF files\nconst pdfFiles = allFiles.filter(file => {\n  return file.mimeType === 'application/pdf';\n});\n\n// Return each PDF as a separate item for n8n\nreturn pdfFiles.map(pdf => ({ json: pdf }));"
      },
      "id": "05614249-3288-4699-a455-cde6898f8459",
      "name": "Filter PDFs Only",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2832,
        176
      ]
    },
    {
      "parameters": {
        "operation": "move",
        "fileId": {
          "__rl": true,
          "value": "={{ $json._fileId }}",
          "mode": ""
        },
        "driveId": {
          "__rl": true,
          "value": "My Drive",
          "mode": "list"
        },
        "folderId": {
          "__rl": true,
          "value": "1CQWsocqKluQnSkUdMGQsL-Owsr7aQXQn",
          "mode": "id"
        }
      },
      "id": "3862f25b-aa42-4bcc-80e2-bd3eea4b7720",
      "name": "Move to Processed",
      "type": "n8n-nodes-base.googleDrive",
      "position": [
        -864,
        80
      ],
      "typeVersion": 3,
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "czkniWtEtuPsZAHm",
          "name": "Google Drive account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Email - Error Alert": {
      "main": [
        []
      ]
    },
    "Email - Standard": {
      "main": [
        []
      ]
    },
    "Check Processing Success": {
      "main": [
        [
          {
            "node": "Move to Processed",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Move to Failed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log to Sheets": {
      "main": [
        [
          {
            "node": "Check Processing Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse AI Response": {
      "main": [
        [
          {
            "node": "Log to Sheets",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent for Scoring",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent for Scoring": {
      "main": [
        [
          {
            "node": "Parse AI Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "AI Agent for Scoring",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download CV": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split In Batches": {
      "main": [
        [
          {
            "node": "Download CV",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Split In Batches",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process CVs Every 30 Minutes": {
      "main": [
        [
          {
            "node": "Get All CVs via API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get All CVs via API": {
      "main": [
        [
          {
            "node": "Filter PDFs Only",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter PDFs Only": {
      "main": [
        [
          {
            "node": "Split In Batches",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Move to Failed": {
      "main": [
        [
          {
            "node": "Email - Error Alert",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Move to Processed": {
      "main": [
        [
          {
            "node": "Email - Standard",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "356f0b76-e710-47ec-b50f-0841dd866955",
  "meta": {
    "instanceId": "2124966876188f3f6288207ab0ceccd33490d42841d70810e22f2a657085e1b2"
  },
  "id": "E5a749PvCMW9FD4s",
  "tags": []
}